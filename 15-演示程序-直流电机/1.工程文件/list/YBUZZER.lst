C51 COMPILER V9.60.0.0   YBUZZER                                                           06/02/2022 20:42:35 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE YBUZZER
OBJECT MODULE PLACED IN .\list\YBUZZER.obj
COMPILER INVOKED BY: D:\STM32\C51\BIN\C51.EXE YBUZZER\YBUZZER.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\delay;.\GPIO;.\L
                    -ED;.\OLED;.\Gyro;.\Uart1;.\STEP_MOTOR;.\TRAFFIC_LIGHT;.\delay;.\PULSE;.\KEY;.\MKEY;.\BMKEY;.\YBUZZER;.\WBUZZER;.\ONELED;
                    -.\FOURLED;.\88ELED;.\1616ELED;.\LCD1602;.\LCD12864;.\LCDTFT;.\SPI;.\STMP_MOTO;.\DCMOTO) DEBUG OBJECTEXTEND PRINT(.\list\
                    -YBUZZER.lst) TABS(2) OBJECT(.\list\YBUZZER.obj)

line level    source

   1          #include "YBUZZER.h"
   2          
   3          
   4          
   5          
   6          void  YBUZZER_GPIO_config(void)
   7          {
   8   1        GPIO_InitTypeDef  GPIO_InitStructure;     //结构定义
   9   1        GPIO_InitStructure.Mode = GPIO_OUT_PP;    //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_
             -OUT_PP
  10   1        
  11   1        GPIO_InitStructure.Pin  = GPIO_Pin_7;     //指定要初始化的IO, GPIO_Pin_7, 或操作
  12   1        GPIO_Inilize(GPIO_P2, &GPIO_InitStructure); //初始化
  13   1      }
  14          //========================================================================
  15          // 函数: unsigned char  Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  16          // 描述: 定时器初始化程序.
  17          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  18          // 返回: 成功返回0, 空操作返回1,错误返回2.
  19          // 版本: V1.0, 2012-10-22
  20          //========================================================================
  21          unsigned char Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  22          {
  23   1        if(TIM > Timer2) return 1;  //空操作
  24   1      
  25   1        if(TIM == Timer0)
  26   1        {
  27   2          TR0 = 0;    //停止计数
  28   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //允许中断
  29   2          else                  ET0 = 0;  //禁止中断
  30   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //高优先级中断
  31   2          else                  PT0 = 0;  //低优先级中断
  32   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //错误
  33   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
  34   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
  35   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
  36   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //对外计数或分频
  37   2          else                    TMOD &= ~0x04;  //定时
  38   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;  //输出时钟
  39   2          else              INT_CLKO &= ~0x01;  //不输出时钟
  40   2          
  41   2          TH0 = (unsigned char)(TIMx->TIM_Value >> 8);
  42   2          TL0 = (unsigned char)TIMx->TIM_Value;
  43   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //开始运行
  44   2          return  0;    //成功
  45   2        }
  46   1      
  47   1        if(TIM == Timer1)
  48   1        {
  49   2          TR1 = 0;    //停止计数
  50   2          if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //允许中断
C51 COMPILER V9.60.0.0   YBUZZER                                                           06/02/2022 20:42:35 PAGE 2   

  51   2          else                  ET1 = 0;  //禁止中断
  52   2          if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //高优先级中断
  53   2          else                  PT1 = 0;  //低优先级中断
  54   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
  55   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
  56   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
  57   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
  58   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //对外计数或分频
  59   2          else                    TMOD &= ~0x40;  //定时
  60   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;  //输出时钟
  61   2          else              INT_CLKO &= ~0x02;  //不输出时钟
  62   2          
  63   2          TH1 = (unsigned char)(TIMx->TIM_Value >> 8);
  64   2          TL1 = (unsigned char)TIMx->TIM_Value;
  65   2          if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //开始运行
  66   2          return  0;    //成功
  67   2        }
  68   1      
  69   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
  70   1        {
  71   2          AUXR &= ~(1<<4);  //停止计数
  72   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //允许中断
  73   2          else                    IE2  &= ~(1<<2);  //禁止中断
  74   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
  75   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
  76   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
  77   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //对外计数或分频
  78   2          else                    AUXR &= ~(1<<3);  //定时
  79   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;  //输出时钟
  80   2          else              INT_CLKO &= ~0x04;  //不输出时钟
  81   2      
  82   2          TH2 = (unsigned char)(TIMx->TIM_Value >> 8);
  83   2          TL2 = (unsigned char)TIMx->TIM_Value;
  84   2          if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //开始运行
  85   2          return  0;    //成功
  86   2        }
  87   1        return 2; //错误
  88   1      }
  89          
  90          
  91          
  92          /********************* Timer2中断函数************************/
  93          void timer2_int (void) interrupt TIMER2_VECTOR
  94          {
  95   1        P27 = ~P27;
  96   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    482    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
