C51 COMPILER V9.60.0.0   LCDTFT                                                            06/02/2022 20:42:35 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LCDTFT
OBJECT MODULE PLACED IN .\list\LCDTFT.obj
COMPILER INVOKED BY: D:\STM32\C51\BIN\C51.EXE LCDTFT\LCDTFT.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\delay;.\GPIO;.\LED
                    -;.\OLED;.\Gyro;.\Uart1;.\STEP_MOTOR;.\TRAFFIC_LIGHT;.\delay;.\PULSE;.\KEY;.\MKEY;.\BMKEY;.\YBUZZER;.\WBUZZER;.\ONELED;.\
                    -FOURLED;.\88ELED;.\1616ELED;.\LCD1602;.\LCD12864;.\LCDTFT;.\SPI;.\STMP_MOTO;.\DCMOTO) DEBUG OBJECTEXTEND PRINT(.\list\LC
                    -DTFT.lst) TABS(2) OBJECT(.\list\LCDTFT.obj)

line level    source

   1          #include "LCDTFT.h"
   2          #include "FONTTFT.h"
   3          /*********************************************************************
   4          文件名称：LEDTFT.h
   5          版    本：V1.0
   6          说    明：LEDTFT相关函数功能文件
   7          修改记录：2021-11-11
   8          *********************************************************************/
   9          
  10          /*********************************************************************
  11          函数原型：void  LCDTFT_GPIO_config(void)
  12          函数功能：LCD端口初始化函数
  13          输入参数：无
  14          输出参数：无
  15          *********************************************************************/
  16          void  LCDTFT_GPIO_config(void)
  17          {
  18   1        GPIO_InitTypeDef  GPIO_InitStructure;     //结构定义
  19   1        GPIO_InitStructure.Mode = GPIO_PullUp;    //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_
             -OUT_PP
  20   1        
  21   1        GPIO_InitStructure.Pin  = GPIO_Pin_All;     //指定要初始化的IO, GPIO_Pin_7, 或操作
  22   1        GPIO_Inilize(GPIO_P6, &GPIO_InitStructure); //初始化
  23   1        
  24   1        GPIO_InitStructure.Mode = GPIO_PullUp;  
  25   1        GPIO_InitStructure.Pin  = GPIO_Pin_0 |GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_3;
  26   1        GPIO_Inilize(GPIO_P7, &GPIO_InitStructure); //初始化
  27   1        GPIO_InitStructure.Mode = GPIO_PullUp;
  28   1        GPIO_InitStructure.Pin  = GPIO_Pin_1;     //指定要初始化的IO, GPIO_Pin_7, 或操作
  29   1        GPIO_Inilize(GPIO_P0, &GPIO_InitStructure); //初始化
  30   1        
  31   1      }
  32          
  33          static void Delay(u8 delay)
  34          {
  35   1        u8 j;
  36   1        while(delay--)
  37   1        {
  38   2          for(j=0;j<1;j++);
  39   2        }
  40   1      }
  41          
  42          void TFT_WR_REG(u16 cmd)
  43          {
  44   1        TFTCSLow();
  45   1        TFTRSLow();
  46   1        TFTRWLow();
  47   1        
  48   1        P6 = cmd;
  49   1        P7 = cmd >> 8;
  50   1        
  51   1        TFTCSHigh();
C51 COMPILER V9.60.0.0   LCDTFT                                                            06/02/2022 20:42:35 PAGE 2   

  52   1        Delay(8);
  53   1      }
  54          
  55          void TFT_WR_Data(u16 dat)
  56          {
  57   1        TFTCSLow();
  58   1        TFTRSHigh();
  59   1        TFTRWLow();
  60   1        
  61   1        P6 = dat;
  62   1        P7 = dat >> 8;
  63   1      
  64   1        TFTCSHigh();
  65   1        Delay(5);
  66   1      }
  67          
  68          //
  69          //
  70          void TFT_Set_Window(u16 startX,u16 startY,u16 endX, u16 endY)       
  71          {                                                                             
  72   1        TFT_WR_REG(0x0020);
  73   1        TFT_WR_Data(startX);
  74   1        TFT_WR_REG(0x0021);
  75   1        TFT_WR_Data(endX);
  76   1      
  77   1        TFT_WR_REG(0x0022);
  78   1        TFT_WR_Data(startY);
  79   1        TFT_WR_REG(0x0023);
  80   1        TFT_WR_Data(endY);
  81   1        
  82   1        TFT_WR_REG(0x002F);
  83   1      }
  84          
  85          //强制设置当前光标位置
  86          void TFT_SetCursor(u16 xCursor, u16 yCursor)
  87          {
  88   1        TFT_WR_REG(0x0024);
  89   1        TFT_WR_Data(xCursor);
  90   1        TFT_WR_REG(0x0025); 
  91   1          TFT_WR_Data(yCursor);
  92   1        
  93   1        TFT_WR_REG(0x002F);
  94   1      }
  95          
  96          //POINT_COLOR:此点的颜色
  97          void TFT_DrawPoint(u16 x,u16 y,u16 color)
  98          {
  99   1        TFT_SetCursor(x,y);
 100   1        TFT_WR_Data(color);
 101   1      }
 102          
 103          //默认320*240大小
 104          //逐行从左到右扫描，逐列从上到下扫描
 105          void TFT320_Clear(u16 color)
 106          {
 107   1        u16 i,j;
 108   1      
 109   1        TFT_Set_Window(0,0,319,239);
 110   1        for (i=0;i<320;i++)
 111   1        {
 112   2          for (j=0;j<240;j++)
 113   2          {
C51 COMPILER V9.60.0.0   LCDTFT                                                            06/02/2022 20:42:35 PAGE 3   

 114   3            TFT_WR_Data(color);
 115   3          }
 116   2        }
 117   1      }
 118          
 119          //取绝对值函数
 120          //位宽:32bit
 121          u32 abs(s32 res)
 122          {
 123   1        if(res<0)return -res;
 124   1        else return res;
 125   1      }  
 126          
 127          //画线
 128          //x1,y1:起点坐标
 129          //x2,y2:终点坐标  
 130          void TFT_DrawLine(u16 x1, u16 y1, u16 x2,u16 y2, u16 color)
 131          {
 132   1          u16 x, y, t;
 133   1        if((x1==x2)&&(y1==y2))TFT_DrawPoint(x1, y1,color);
 134   1        else if(abs(y2-y1)>abs(x2-x1))//斜率大于1 
 135   1        {
 136   2          if(y1>y2) 
 137   2          {
 138   3            t=y1;
 139   3            y1=y2;
 140   3            y2=t; 
 141   3            t=x1;
 142   3            x1=x2;
 143   3            x2=t; 
 144   3          }
 145   2          for(y=y1;y<=y2;y++)//以y轴为基准 
 146   2          {
 147   3            x=(u32)(y-y1)*(x2-x1)/(y2-y1)+x1;
 148   3            TFT_DrawPoint(x, y,color);  
 149   3          }
 150   2        }
 151   1        else     //斜率小于等于1 
 152   1        {
 153   2          if(x1>x2)
 154   2          {
 155   3            t=y1;
 156   3            y1=y2;
 157   3            y2=t;
 158   3            t=x1;
 159   3            x1=x2;
 160   3            x2=t;
 161   3          }   
 162   2          for(x=x1;x<=x2;x++)//以x轴为基准 
 163   2          {
 164   3            y =(u32)(x-x1)*(y2-y1)/(x2-x1)+y1;
 165   3            TFT_DrawPoint(x,y,color); 
 166   3          }
 167   2        } 
 168   1      }
 169          
 170          void TFT_WriteASCII16(u16 x, u16 y, u16 Color, u16 BK_Color,u8* Matrix)
 171          {
 172   1        u8 i, j;
 173   1        u8 temp;
 174   1        TFT_Set_Window(x,y,x+7,y+15);
 175   1          for (i=0;i<16;i++)
C51 COMPILER V9.60.0.0   LCDTFT                                                            06/02/2022 20:42:35 PAGE 4   

 176   1          {
 177   2          temp=Matrix[i];
 178   2              for (j=0;j<8;j++)
 179   2              {
 180   3                  if ( temp & (0x80>>j) ) 
 181   3                  {         
 182   4                      TFT_WR_Data(Color);                              
 183   4                  } 
 184   3                  else 
 185   3            {
 186   4              TFT_WR_Data(BK_Color);
 187   4            }
 188   3              } 
 189   2          }
 190   1      }
 191          
 192          void TFT_WriteCN16(u16 x, u16 y, u16 Color, u16 BK_Color,u8* Matrix)
 193          {
 194   1        u8 i, j;
 195   1        u8 temp;
 196   1        TFT_Set_Window(x,y,x+15,y+15);
 197   1          for (i=0;i<32;i++)
 198   1          {
 199   2          temp=Matrix[i];
 200   2              for (j=0;j<8;j++)
 201   2              {
 202   3                  if ( temp & (0x80>>j) ) 
 203   3                  {         
 204   4                      TFT_WR_Data(Color);                              
 205   4                  } 
 206   3                  else 
 207   3            {
 208   4              TFT_WR_Data(BK_Color);
 209   4            }
 210   3              } 
 211   2          }
 212   1      }
 213          
 214          u8 en_char_index_TFT(u8 T)
 215          {
 216   1        return T-32;
 217   1      }
 218          
 219          /* 返回一个16*16字符索引位置 */
 220          u8 cn_char_index_TFT( u8 *s){
 221   1        u8 i;
 222   1        for(i=0;zm16x16_index_TFT[i]!=0;i+=2)
 223   1          if(zm16x16_index_TFT[i]==*s&&zm16x16_index_TFT[i+1]==*(s+1))break;
 224   1        return i/2;
 225   1      }
 226          
 227          /* 显示字符串 */
 228          void TFT_ShowStr(u16 x,u16 y, u16 color, u16 bkColor, u8 *s)
 229          {
 230   1        u8 i;
 231   1        for(i=0;s[i]!=0;i++){
 232   2          if(x>=304){  //换行处理
 233   3            x=0;
 234   3            y+=16;
 235   3          }
 236   2          if(y>=224)
 237   2          {
C51 COMPILER V9.60.0.0   LCDTFT                                                            06/02/2022 20:42:35 PAGE 5   

 238   3            y = 0;
 239   3          }
 240   2          if(s[i]<0x80){  //英文
 241   3             TFT_WriteASCII16(x,y,color,bkColor,zm8x16_Table_TFT[en_char_index_TFT(s[i])]);
 242   3             x+=8;
 243   3          }else{
 244   3            TFT_WriteCN16(x,y,color,bkColor,zm16x16_Table_TFT[cn_char_index_TFT(&s[i])]);
 245   3            x+=16;i++;
 246   3          }
 247   2        }
 248   1      }
 249          
 250          
 251          //code 字符指针开始
 252          //从字库中查找出字模
 253          //code 字符串的开始地址,GBK码
 254          //mat  数据存放地址 (size/8+((size%8)?1:0))*(size) bytes大小  
 255          void Get_Hz16Mat(const u8 *ccode,u8 *mat)
 256          {       
 257   1        unsigned char qh,ql;
 258   1        unsigned char i;            
 259   1        unsigned long foffset; 
 260   1        qh=*ccode;
 261   1        ql=*(++ccode);
 262   1        if(qh<0xA1||ql<0xA1||ql==0xff||qh>0xf7||(qh>0xA9&&qh<0xB0))//非 常用汉字
 263   1        {           
 264   2            for(i=0;i<32;i++)*mat++=0x00;//填充满格
 265   2            return; //结束访问
 266   2        }          
 267   1        ql-=0xA1;
 268   1        /*
 269   1        if(qh<0xB0)qh-=0xA1;
 270   1        else qh-=0xA7;
 271   1        */
 272   1        qh-=0xA1;
 273   1        foffset=((unsigned long)94*qh+ql)*32; //得到字库中的字节偏移量 
 274   1        SPIFlashReadData(foffset,mat,32);                     
 275   1      } 
 276          
 277          /* 显示任意16大小字符串 */
 278          void TFT_ShowAnyStr(u16 x,u16 y, u16 color, u16 bkColor, const u8 *s)
 279          {
 280   1        u8 i,mat[32];
 281   1        for(i=0;s[i]!=0;i++){
 282   2          if(x>=304){  //换行处理
 283   3            x=0;
 284   3            y+=16;
 285   3          }
 286   2          if(y>=224)
 287   2          {
 288   3            y = 0;
 289   3          }
 290   2          if(s[i]<0x80){  //英文
 291   3             TFT_WriteASCII16(x,y,color,bkColor,zm8x16_Table_TFT[en_char_index_TFT(s[i])]);
 292   3             x+=8;
 293   3          }else{
 294   3            Get_Hz16Mat(&s[i],mat);
 295   3            TFT_WriteCN16(x,y,color,bkColor,mat);
 296   3            x+=16;i++;
 297   3          }
 298   2        }
 299   1      }
C51 COMPILER V9.60.0.0   LCDTFT                                                            06/02/2022 20:42:35 PAGE 6   

 300          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2293    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   2711     123
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
