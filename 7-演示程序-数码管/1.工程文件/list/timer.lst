C51 COMPILER V9.00   TIMER                                                                 11/01/2021 16:29:52 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: D:\keil51\C51\BIN\C51.EXE Timer\timer.c OMF2 BROWSE INCDIR(.\delay;.\GPIO;.\OLED;.\Timer;.\digital)
                    - DEBUG PRINT(.\list\timer.lst) OBJECT(.\list\timer.obj)

line level    source

   1          #include "timer.h"
   2          
   3          
   4          
   5          //========================================================================
   6          // 函数: unsigned char  Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
   7          // 描述: 定时器初始化程序.
   8          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
   9          // 返回: 成功返回0, 空操作返回1,错误返回2.
  10          // 版本: V1.0, 2012-10-22
  11          //========================================================================
  12          unsigned char   Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  13          {
  14   1              if(TIM > Timer2) return 1;      //空操作
  15   1      
  16   1              if(TIM == Timer0)
  17   1              {
  18   2                      TR0 = 0;                //停止计数
  19   2                      if(TIMx->TIM_Interrupt == ENABLE)               ET0 = 1;        //允许中断
  20   2                      else                                                                    ET0 = 0;        //禁止中断
  21   2                      if(TIMx->TIM_Polity == PolityHigh)              PT0 = 1;        //高优先级中断
  22   2                      else                                                                    PT0 = 0;        //低优先级中断
  23   2                      if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2;       //错误
  24   2                      TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
  25   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~0x80;  //12T
  26   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  0x80;  //1T
  27   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        TMOD |=  0x04;  //对外计数或分频
  28   2                      else                                                                            TMOD &= ~0x04;  //定时
  29   2                      if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;      //输出时钟
  30   2                      else                                                    INT_CLKO &= ~0x01;      //不输出时钟
  31   2                      
  32   2                      TH0 = (unsigned char)(TIMx->TIM_Value >> 8);
  33   2                      TL0 = (unsigned char)TIMx->TIM_Value;
  34   2                      if(TIMx->TIM_Run == ENABLE)     TR0 = 1;        //开始运行
  35   2                      return  0;              //成功
  36   2              }
  37   1      
  38   1              if(TIM == Timer1)
  39   1              {
  40   2                      TR1 = 0;                //停止计数
  41   2                      if(TIMx->TIM_Interrupt == ENABLE)               ET1 = 1;        //允许中断
  42   2                      else                                                                    ET1 = 0;        //禁止中断
  43   2                      if(TIMx->TIM_Polity == PolityHigh)              PT1 = 1;        //高优先级中断
  44   2                      else                                                                    PT1 = 0;        //低优先级中断
  45   2                      if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2;       //错误
  46   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
  47   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~0x40;  //12T
  48   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  0x40;  //1T
  49   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        TMOD |=  0x40;  //对外计数或分频
  50   2                      else                                                                            TMOD &= ~0x40;  //定时
  51   2                      if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;      //输出时钟
  52   2                      else                                                    INT_CLKO &= ~0x02;      //不输出时钟
  53   2                      
C51 COMPILER V9.00   TIMER                                                                 11/01/2021 16:29:52 PAGE 2   

  54   2                      TH1 = (unsigned char)(TIMx->TIM_Value >> 8);
  55   2                      TL1 = (unsigned char)TIMx->TIM_Value;
  56   2                      if(TIMx->TIM_Run == ENABLE)     TR1 = 1;        //开始运行
  57   2                      return  0;              //成功
  58   2              }
  59   1      
  60   1              if(TIM == Timer2)               //Timer2,固定为16位自动重装, 中断无优先级
  61   1              {
  62   2                      AUXR &= ~(1<<4);        //停止计数
  63   2                      if(TIMx->TIM_Interrupt == ENABLE)                       IE2  |=  (1<<2);        //允许中断
  64   2                      else                                                                            IE2  &= ~(1<<2);        //禁止中断
  65   2                      if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)        return 2;
  66   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~(1<<2);        //12T
  67   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  (1<<2);        //1T
  68   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        AUXR |=  (1<<3);        //对外计数或分频
  69   2                      else                                                                            AUXR &= ~(1<<3);        //定时
  70   2                      if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;      //输出时钟
  71   2                      else                                                    INT_CLKO &= ~0x04;      //不输出时钟
  72   2      
  73   2                      TH2 = (unsigned char)(TIMx->TIM_Value >> 8);
  74   2                      TL2 = (unsigned char)TIMx->TIM_Value;
  75   2                      if(TIMx->TIM_Run == ENABLE)     AUXR |=  (1<<4);        //开始运行
  76   2                      return  0;              //成功
  77   2              }
  78   1              return 2;       //错误
  79   1      }
  80          
  81          unsigned char timer0_cnt = 0;
  82          extern unsigned char buzzer_flag;
  83          /********************* Timer0中断函数************************/
  84          void timer0_int (void) interrupt TIMER0_VECTOR
  85          {
  86   1              if(timer0_cnt >= 200)
  87   1              {
  88   2                      timer0_cnt = 0;//定时器0清零
  89   2                      
  90   2                      LED1 = ~LED1;//LED灯闪烁
  91   2              }else
  92   1              {
  93   2                      timer0_cnt++;//定时器0计时
  94   2              }
  95   1      }
  96          
  97          /********************* Timer1中断函数************************/
  98          void timer1_int (void) interrupt TIMER1_VECTOR
  99          {
 100   1              if(buzzer_flag)
 101   1              {
 102   2                      P06 = ~P06;//取反运算 蜂鸣器间断发声
 103   2              }else
 104   1              {
 105   2                      P06 = 0;
 106   2              }
 107   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    457    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
C51 COMPILER V9.00   TIMER                                                                 11/01/2021 16:29:52 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
